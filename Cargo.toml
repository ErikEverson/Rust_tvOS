[package]
name = "hello-rust"
version = "0.1.0"
edition = "2021"

[lib]
name = "hellorust"
crate-type = ["lib", "staticlib"]

# [features]
# default = [ # Note: proper usage of this crate should not rely on default features.
#     "fs-storage",
# ]

# fs-storage = ["ditto-store-sqlite3", "ditto-blob-storage-dyn"]
# encryption = ["ditto-store-sqlite3?/encryption"]

# # Deprecated alias
# im-storage = ["in-memory-storage"]
# in-memory-storage = ["ditto-store-in-memory", "ditto-blob-storage-mem"]
# # See docs for the console feature on ditto-logging
# console = ["ditto-logging/console"]

# generate-headers = [
#     "safer-ffi/c-headers-with-fn-style",
#     "safer-ffi/headers",
# ]
# js = [
#     "safer-ffi/js",
#     "safer-ffi-build/js",
# ]

# Used by our integration tests.
# fatal-logger-errors = ["ditto-logging/fatal-logger-errors"]

[dependencies]
# ditto-auth = { path = "../utils/auth", default-features = false }
# ditto-blob-storage = { path = "../utils/blob-storage" }
# ditto-blob-storage-mem = { path = "../utils/blob-storage-mem", optional = true }
# ditto-configuration = { path = "../utils/configuration" }
# ditto-crdt = { version = "0.3", path = "../core/crdt", features = ["replay"] }
# ditto-fs = { path = "../core/file-system" }
# ditto-jsonstr-validator = { path = "../utils/jsonstr-validator" }
# ditto-license = { path = "../utils/license" }
# ditto-link = { path = "../core/link" }
# ditto-logging = { path = "../utils/logging", default-features = false }
# ditto-mesh = { path = "../core/mesh", default-features = false }
# ditto-mesh-topology = { path = "../core/mesh-topology" }
# ditto-presence = { path = "../core/presence" }
# ditto-protocol = { path = "../core/protocol" }
# ditto-ql = { path = "../utils/ql" }
# ditto-replication = { path = "../core/replication" }
# ditto-sdk-version = { path = "../core/sdk-version" }
# ditto-sql = { path = "../utils/sql" }
# ditto-store = { path = "../core/store" }
# ditto-store-backend = { path = "../core/store-backend" }
# ditto-store-in-memory = { path = "../core/store-in-memory", optional = true }
# ditto-time = { path = "../utils/time" }
# ditto-transports = { path = "../core/transports" }
# ditto-types = { path = "../utils/types" }
# ditto-utils = { path = "../utils/utils" }
# heckel = { version = "*", path = "../utils/heckel" }

# Keep all of these in sync with the workspace Cargo.toml! If any new
# dependencies are added, please add them there as well, with a comment on each
# to keep them in sync with these ones (matching the existing comments).
anyhow = "1.0.71"
async-trait = "0.1.72"
async_fn = "0.0.2"
backtrace = "0.3.67"
base64 = "0.13.1"
cast = "0.3.0"
cfg-if = "1.0.0"
cfg_eval = "0.1.2"
crossbeam-channel = "0.5"
crossbeam-utils = "0.8.16"
extension-traits = "1.0.1"
extern-c = "0.1.0"
futures = "0.3.28"
lazy_static = "1.4.0"
log = "0.4.11"
macro_rules_attribute = "0.1.3"
num-traits = "0.2"
num_cpus = "1.8"
parking_lot = "0.12.1"
paste = "1.0.12"
serde = "1.0.171"
serde_cbor = "0.11.2"
serde_json = "1.0.104"
static_assertions = "1.1.0"
tap = "1.0.1"
thiserror = "1.0.48"
tracing = "0.1.37"
tracing-appender = "0.2"
tracing-subscriber = "0.3"
url = "2.3.1"
with_locals = "0.3.2"

# [dependencies.safer-ffi]
# features = [
#     "async-fn",
#     "dyn-traits",
#     "futures",
#     "tokio",
#     "python-headers",
# ]
# path = "../subrepos/safer-ffi"

# [target.'cfg(not(target_arch = "wasm32"))'.dependencies]
# ditto-auth.features = ["http-server"]
# # ditto-auth.path = "../utils/auth"
# # ditto-blob-storage-dyn = { path = "../utils/blob-storage-dyn", optional = true }
# # ditto-mesh.default-features = true
# # ditto-mesh.path = "../core/mesh"
# # ditto-store-sqlite3 = { path = "../core/store-sqlite3", optional = true }

# # Keep all of these in sync with the workspace Cargo.toml! If any new
# # dependencies are added, please add them there as well, with a comment on each
# # to keep them in sync with these ones (matching the existing comments).
# chrono.version = "0.4.31"
# uuid.version = "1.4.1"
# uuid.features = ["v4"]

# [target.'cfg(not(target_arch = "wasm32"))'.dependencies.tokio]
# version = "1.29.1"
# features = ["full"]

# [target.'cfg(target_arch = "wasm32")'.dependencies]
# # ditto-auth.default-features = false
# # ditto-auth.path = "../utils/auth"

# # Keep all of these in sync with the workspace Cargo.toml! If any new
# # dependencies are added, please add them there as well, with a comment on each
# # to keep them in sync with these ones (matching the existing comments).
# chrono.version = "0.4.31"
# chrono.default-features = false
# chrono.features = ["wasmbind"]
# console_error_panic_hook.version = "0.1.6"
# tracing-wasm.version = "0.2.0"
# uuid.version = "1.4.1"
# uuid.features = ["js"]
# web-sys.version = "0.3"
# web-sys.features = ["Blob"]
# # Ensure the versions of `js-sys` and `wasm-bindgen` are high-enough to
# # include fixes we need.
# js-sys = "0.3.56"
# wasm-bindgen = "0.2.87"

# [target.'cfg(target_arch = "wasm32")'.dependencies.tokio]
# version = "1.29.1"
# features = ["sync"]

# [dev-dependencies]
# ditto-test-support = { path = "../utils/test-support" }

# # Enable the `fatal-logger-errors` features in our tests.
# dittoffi.features = [
#     # Note(Daniel): this feature may be playing a role in the strange heisenbuggy segfaults;
#     #               let's disable it to see.
#     # "fatal-logger-errors",
#     "fs-storage",
# ]
# dittoffi.default-features = false
# dittoffi.path = "."

# # Keep all of these in sync with the workspace Cargo.toml! If any new
# # dependencies are added, please add them there as well, with a comment on each
# # to keep them in sync with these ones (matching the existing comments).
# datadriven = "0.8"
# maplit = "1.0.2"
# rand = "0.8.5"
# require_unsafe_in_body = "0.2.0"
# scopeguard = "1.1.0"
# serial_test = "0.5"
# tempfile = "3.8.0"

# [target.'cfg(target_arch = "wasm32")'.dev-dependencies]
# # Keep all of these in sync with the workspace Cargo.toml! If any new
# # dependencies are added, please add them there as well, with a comment on each
# # to keep them in sync with these ones (matching the existing comments).
# # maplit = "1.0.2"
# # rand = { version = "0.7", features = ["wasm-bindgen"] }
# # getrandom = { version = "0.2", features = ["js"] }
# # wasm-bindgen-cli = "0.2.79"

# [build-dependencies]
# safer-ffi-build.path = "../subrepos/safer-ffi/safer-ffi-build"

# # We need to ensure `-arch arm64` is properly passed when compiling for `-ios`
# # sim with Xcode 15, see:
# #
# # - https://dittolive.slack.com/archives/CNGE71UEB/p1694772114596959
# # - https://github.com/rust-lang/cc-rs/issues/711#issuecomment-1586178904
# cc = ">=1.0.79"

# [package.metadata.wasm-pack.profile.release]
# wasm-opt = ["-Oz", "--enable-mutable-globals"]

# [profile.dev]
# rpath = true

# # These determine the product release builds so we're careful and explicit.
# [profile.release]
# rpath = true
# panic = "unwind"
# debug = false

# [profile.slim-dev]
# inherits = "dev"
# debug = false
